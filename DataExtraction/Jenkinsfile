pipeline {
    agent any

    environment {
        NETLIFY_SITE_ID = 'ca934c0a-d8db-4262-8c52-1e7cde25bde2'
        NETLIFY_AUTH_TOKEN = credentials('netlify-token')
    }

    stages {
        stage('Clone Repository') {
            steps {
                checkout scm
                sh '''
                    echo "Setting permissions for workspace"
                '''
                sh '''
                    if [ -d "DataExtraction" ]; then
                        echo "DataExtraction folder exists. Copying content..."
                        mkdir -p "$WORKSPACE/app"
                        cp -r DataExtraction/* "$WORKSPACE/app"
                    else
                        echo "DataExtraction folder doesn't exist!"
                        exit 1
                    fi
                '''
            }
        }

        stage('Build') {
            agent {
                docker {
                    image 'python:3.12.1-slim'
                    reuseNode true
                }
            }
            steps {
                sh '''
                    if [ -d "$WORKSPACE/app" ]; then
                        echo "Entering app directory to run build..."
                    else
                        echo "app directory not found!"
                        exit 1
                    fi
                '''
                dir('app') {
                    sh '''
                        if [ ! -d "venv" ]; then
                            python -m venv venv
                        fi
                        . venv/bin/activate
                    '''
                    sh '''
                        if [ -f "requirements.txt" ]; then
                            echo "requirements.txt found"
                        else
                            echo "requirements.txt not found!"
                            exit 1
                        fi
                    '''
                    sh '''
                        ls -la
                        . venv/bin/activate
                        pip install --no-cache-dir -r requirements.txt
                        flask --version
                    '''
                }
            }
        }

        stage('Test'){
            parallel {
                stage('E2E Test') {
                    agent {
                        docker {
                            image 'python:3.12.1-slim'
                            reuseNode true
                        }
                    }
                    steps {
                        dir('app') {
                            sh '''
                                if [ -f "e2e_test/test_e2e_extract.py" ]; then
                                    echo "e2e test file found"
                                else
                                    echo "e2e test file not found!"
                                    exit 1
                                fi

                                . venv/bin/activate
                                mkdir -p e2e-test-reports
                                PYTHONPATH=. python e2e_test/test_e2e_extract.py
                            '''
                        }
                    }
                }
                stage('Unit Test') {
                    agent {
                        docker {
                            image 'python:3.12.1-slim'
                            reuseNode true
                        }
                    }
                    steps {
                        dir('app') {
                            sh '''
                                if [ -f "tests/test_extract.py" ]; then
                                    echo "test file found"
                                else
                                    echo "test file not found!"
                                    exit 1
                                fi

                                . venv/bin/activate
                                mkdir -p test-reports
                                PYTHONPATH=. python tests/test_extract.py
                            '''
                        }
                    }
                }
            }
        }

        stage('Deploy') {
            agent {
                docker {
                    image 'python:3.12.1-slim'
                    args '-u root'
                    reuseNode true
                }
            }
            steps {
                sh '''
                    if [ -d "$WORKSPACE/app" ]; then
                        echo "Entering app directory to run build..."
                    else
                        echo "app directory not found!"
                        exit 1
                    fi
                '''
                dir('app') {
                    // check if there is any virutalenv
                    sh '''
                        if [ ! -d "venv" ]; then
                            python -m venv venv
                        fi
                        . venv/bin/activate
                    '''
                    // check if the requirements file do exists
                    sh '''
                        if [ -f "requirements.txt" ]; then
                            echo "requirements.txt found"
                        else
                            echo "requirements.txt not found!"
                            exit 1
                        fi
                    '''
                    // install node.js and npm
                    sh '''
                        apt-get update
                        apt-get install -y curl
                        curl -fsSL https://deb.nodesource.com/setup_18.x | bash -
                        apt-get install -y nodejs
                        node -v
                    '''
                    // install requirements.txt file
                    sh '''
                        ls -la
                        . venv/bin/activate
                        pip install --no-cache-dir -r requirements.txt
                        flask --version
                    '''
                    // install netlify cli globally
                    sh '''
                        npm install netlify-cli
                        node_modules/.bin/netlify --version
                        node_modules/.bin/netlify status
                    '''
                }
            }
        }
        
    }

    post {
        always {
            // Publish JUnit test results
            junit 'app/test-reports/*.xml'
        }
    }
}
