pipeline {
    agent any

    environment {
        NETLIFY_SITE_ID = 'ca934c0a-d8db-4262-8c52-1e7cde25bde2'
        NETLIFY_AUTH_TOKEN = credentials('netlify-token')
    }

    stages {
        stage('Clone Repository') {
            steps {
                checkout scm
                sh '''
                    echo "Setting permissions for workspace"
                '''
                sh '''
                    if [ -d "DataExtraction" ]; then
                        echo "DataExtraction folder exists. Copying content..."
                        mkdir -p "$WORKSPACE/app"
                        cp -r DataExtraction/* "$WORKSPACE/app"
                    else
                        echo "DataExtraction folder doesn't exist!"
                        exit 1
                    fi
                '''
            }
        }

        stage('Build') {
            agent {
                docker {
                    image 'python:3.12.1-slim'
                    reuseNode true
                }
            }
            steps {
                dir('app') {
                    sh '''
                        if [ ! -d "venv" ]; then
                            python -m venv venv
                        fi
                        . venv/bin/activate

                        if [ ! -f "requirements.txt" ]; then
                            echo "requirements.txt not found!"
                            exit 1
                        fi
                        
                        # Install requirements
                        pip install --no-cache-dir -r requirements.txt
                        flask --version
                    '''
                }
            }
        }

        stage('Test') {
            parallel {
                stage('E2E Test') {
                    agent {
                        docker {
                            image 'python:3.12.1-slim'
                            reuseNode true
                        }
                    }
                    steps {
                        dir('app') {
                            sh '''
                                if [ -f "e2e_test/test_e2e_extract.py" ]; then
                                    . venv/bin/activate
                                    mkdir -p e2e-test-reports
                                    PYTHONPATH=. python e2e_test/test_e2e_extract.py
                                else
                                    echo "e2e test file not found!"
                                    exit 1
                                fi
                            '''
                        }
                    }
                    post {
                        always {
                            // Publish test results for prod e2e
                            junit 'app/e2e-test-reports/*.xml'
                        }
                    }
                }
                stage('Unit Test') {
                    agent {
                        docker {
                            image 'python:3.12.1-slim'
                            reuseNode true
                        }
                    }
                    steps {
                        dir('app') {
                            sh '''
                                if [ -f "tests/test_extract.py" ]; then
                                    . venv/bin/activate
                                    mkdir -p test-reports
                                    PYTHONPATH=. python tests/test_extract.py
                                else
                                    echo "unit test file not found!"
                                    exit 1
                                fi
                            '''
                        }
                    }
                }
            }
        }
        stage('Deploy Stage') {
            agent {
                docker {
                    image 'python:3.12.1-slim'
                    args '-u root'
                    reuseNode true
                }
            }
            steps {
                dir('app') {
                    // Check if 'build' directory already exists
                    sh '''
                        if [ ! -d "build" ]; then
                            echo "No build directory found! You need to run flask freeze or provide the build directory."
                            exit 1
                        fi
                    '''
                    
                    // Deploy the existing 'build' directory to Netlify
                    sh '''
                        # Update packages and install dependencies without cache
                        # Clean the cache and update package lists
                        apt-get clean
                        rm -rf /var/lib/apt/lists/*
                        apt-get update --fix-missing

                        # Install curl if it's not installed
                        apt-get install -y --no-install-recommends curl

                        # Install Node.js 18.x from NodeSource
                        curl -fsSL https://deb.nodesource.com/setup_18.x | bash -
                        apt-get install -y nodejs
                        node -v
                        npm -v
                    '''
                    sh '''
                        npm install netlify-cli node-jq
                        node_modules/.bin/netlify --version
                        echo "Deploying to production. Site ID: $NETLIFY_SITE_ID"
                        node_modules/.bin/netlify status

                        echo "Deploying to Netlify using the existing 'build' folder..."
                        node_modules/.bin/netlify deploy --dir=build --site=$NETLIFY_SITE_ID --auth=$NETLIFY_AUTH_TOKEN --json > deploy-output.json
                        node_modules/.bin/node-jq -r '.deploy_url' deploy-output.json
                    '''
                    script {
                        env.STAGING_URL = sh(script: "node_modules/.bin/node-jq -r '.deploy_url' deploy-output.json", returnStdout: true)
                    }
                }
            }
        }
        stage('Staging E2E Test') {
            environment {
                DEPLOYED_SITE_URL = "${env.STAGING_URL}"
            }
            agent {
                docker {
                    image 'python:3.12.1-slim'
                    reuseNode true
                }
            }
            steps {
                dir('app') {
                    sh '''
                        echo "Running test on staging site"
                        . venv/bin/activate
                        if [ -f "e2e_test/test_e2e_staging.py" ]; then
                            export SITE_URL=$DEPLOYED_SITE_URL
                            mkdir -p e2e-staging-reports
                            PYTHONPATH=. python e2e_test/test_e2e_staging.py
                        else
                            echo "e2e staging test file not found!"
                            exit 1
                        fi
                    '''
                }
            }
            post {
                always {
                    // Publish test results for staging e2e
                    junit 'app/e2e-staging-reports/*.xml'
                }
            }
        }
        stage('Approve') {
            steps {
                timeout(1) {
                    input message: 'Ready to deploy?', ok: 'Yes, I am sure!'
                }
            }
        }
        stage('Deploy Prod') {
            agent {
                docker {
                    image 'python:3.12.1-slim'
                    args '-u root'
                    reuseNode true
                }
            }
            steps {
                dir('app') {
                    // Check if 'build' directory already exists
                    sh '''
                        if [ ! -d "build" ]; then
                            echo "No build directory found! You need to run flask freeze or provide the build directory."
                            exit 1
                        fi
                    '''
                    
                    // Deploy the existing 'build' directory to Netlify
                    sh '''
                        # Update packages and install dependencies without cache
                        # Clean the cache and update package lists
                        apt-get clean
                        rm -rf /var/lib/apt/lists/*
                        apt-get update --fix-missing

                        # Install curl if it's not installed
                        apt-get install -y --no-install-recommends curl

                        # Install Node.js 18.x from NodeSource
                        curl -fsSL https://deb.nodesource.com/setup_18.x | bash -
                        apt-get install -y nodejs
                        node -v
                        npm -v
                    '''
                    sh '''
                        npm install netlify-cli
                        node_modules/.bin/netlify --version
                        echo "Deploying to production. Site ID: $NETLIFY_SITE_ID"
                        node_modules/.bin/netlify status

                        echo "Deploying to Netlify using the existing 'build' folder..."
                        node_modules/.bin/netlify deploy --prod --dir=build --site=$NETLIFY_SITE_ID --auth=$NETLIFY_AUTH_TOKEN
                    '''
                }
            }
        }
        stage('Production E2E Test') {
            environment {
                DEPLOYED_SITE_URL = 'https://py-materials.netlify.app'
            }
            agent {
                docker {
                    image 'python:3.12.1-slim'
                    reuseNode true
                }
            }
            steps {
                dir('app') {
                    sh '''
                        echo "Running test on deployed site"
                        . venv/bin/activate
                        if [ -f "e2e_test/test_e2e_live.py" ]; then
                            export SITE_URL=$DEPLOYED_SITE_URL
                            mkdir -p e2e-live-reports
                            PYTHONPATH=. python e2e_test/test_e2e_live.py
                        else
                            echo "e2e live test file not found!"
                            exit 1
                        fi
                    '''
                }
            }
            post {
                always {
                    // Publish test results for prod e2e
                    junit 'app/e2e-live-reports/*.xml'
                }
            }
        }
    }

    post {
        always {
            // Publish JUnit test results
            junit 'app/test-reports/*.xml'
        }
    }
}
