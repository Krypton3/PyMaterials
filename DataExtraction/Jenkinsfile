pipeline {
    agent any

    environment {
        APP_VERSION = "1.1.$BUILD_ID"
        APP_NAME = 'awsjenkinsapp'
        AWS_DEFAULT_REGION = 'ca-central-1'
        AWS_ECS_CLUSTER = 'LearnJenkins-Prod'
        AWS_CLUSTER_SERVICE = 'LearnJenkins-Service-Prod'
        AWS_SERVICE_TASK = 'LearnJenkins-TaskDefinition-Prod'
    }

    stages {
        stage('Application Build') {
            agent {
                docker {
                    image 'app-container'
                    args '-u root'
                    reuseNode true
                }
            }
            steps {
                // Fetching repository to app directory
                checkout scm
                sh '''
                    echo "Setting permissions for workspace"
                '''
                sh '''
                    if [ -d "DataExtraction" ]; then
                        echo "DataExtraction folder exists. Copying content..."
                        mkdir -p "$WORKSPACE/app"
                        cp -r DataExtraction/* "$WORKSPACE/app"
                    else
                        echo "DataExtraction folder doesn't exist!"
                        exit 1
                    fi
                '''
                // building the environment in the app directory
                dir('app') {
                    sh '''
                        if [ ! -d "venv" ]; then
                            python -m venv venv
                        fi
                        . venv/bin/activate

                        if [ ! -f "requirements.txt" ]; then
                            echo "requirements.txt not found!"
                            exit 1
                        fi
                        
                        # Install requirements
                        pip install --no-cache-dir -r requirements.txt
                        flask --version
                        python app.py freeze
                    '''
                }
            }
        }
        stage('Docker Image Build') {
            agent {
                docker {
                    image 'aws-container'
                    args "-u root -v /var/run/docker.sock:/var/run/docker.sock --entrypoint=''"
                    reuseNode true
                }
            }
            steps {
                dir('app') {
                    sh '''
                        docker build --no-cache -t $APP_NAME:$APP_VERSION .
                    '''
                }
            }
        }
        stage('AWS Deployment') {
            agent {
                docker {
                    image 'aws-container'
                    args "-u root --entrypoint=''"
                    reuseNode true
                }
            }
            steps {
                dir('app') {
                    withCredentials([usernamePassword(credentialsId: 'my_aws', passwordVariable: 'AWS_SECRET_ACCESS_KEY', usernameVariable: 'AWS_ACCESS_KEY_ID')]) {
                        sh '''
                            aws --version
                            REVISION_ID=$(aws ecs register-task-definition --cli-input-json file://aws/task-definition-prod.json | jq '.taskDefinition.revision')
                            echo $REVISION_ID
                            aws ecs update-service --cluster $AWS_ECS_CLUSTER --service $AWS_CLUSTER_SERVICE --task-definition $AWS_SERVICE_TASK:$REVISION_ID
                            aws ecs wait services-stable --cluster $AWS_ECS_CLUSTER --service $AWS_CLUSTER_SERVICE
                        '''
                    }
                }
            }
        }
    }
}
